/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.10.2025 12:12:34

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1568;
#else
constexpr int kTensorArenaSize = 544;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,207 } };
const TfArray<1, float> quant0_scale = { 1, { 0.2699107825756073, } };
const TfArray<1, int> quant0_zero = { 1, { -92 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { -105, 76, -22, 15, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00088821753161028028, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*10] = { 
  55, 58, 102, -23, -13, -110, -101, -46, 123, 59, 
  74, -17, -82, -125, -118, -90, 7, 44, -40, 3, 
  -127, 87, -65, -70, 70, -90, 96, 65, 55, -75, 
  18, -18, 0, 34, 59, -29, 73, -55, -88, -108, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0061729056760668755, } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { 103, -17, -15, 29, -102, 29, -27, 76, -12, 36, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00084225734462961555, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*20] = { 
  79, -74, -60, 27, 93, 15, 124, -86, -3, -42, 21, 17, 64, 116, 68, -54, 7, -15, -74, 19, 
  -53, -103, 57, 56, 44, -36, -49, -88, -81, 14, -46, -46, 52, 16, 58, 75, -47, 27, -39, -25, 
  -20, -87, -6, 90, -45, -52, -34, 15, -36, -12, 28, 44, -22, -79, -12, -63, 71, -87, -90, -72, 
  72, 6, 88, -6, -44, 70, -32, -36, -23, 68, 87, 42, -57, -76, -42, -8, -17, -47, 99, 87, 
  -75, 64, -83, -55, -67, 62, -46, 30, -79, 55, 79, 50, -24, 41, 35, -83, -49, 94, 74, 67, 
  -90, 73, -53, 34, -13, -102, 9, 85, -110, -49, 68, 53, -37, 76, 24, -53, -25, 70, -89, 9, 
  70, 38, -61, -97, 65, 66, 3, -34, -27, -1, 52, 36, -69, -42, -81, -20, 48, -34, -20, -41, 
  1, 105, 48, 94, -15, 73, 94, -97, 98, -29, -52, 99, 67, -25, -127, 41, 88, 12, 26, 80, 
  95, 32, 46, 87, 75, 47, -97, -25, -9, 9, 91, 19, -6, -93, -68, 81, -79, 60, -30, 9, 
  54, -74, -10, -2, 78, 90, -11, 12, 70, -79, -52, 43, -58, -45, 20, -13, -11, 68, 10, 78, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.004357591737061739, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[20] = { 136, 24, 28, 186, 29, -3, 156, -88, -7, -29, -3, 0, 91, 47, -36, -32, 98, -76, -25, 90, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00080444262130185962, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[20*207] = { 
  -47, -50, 29, 71, 34, -7, -8, -46, 0, -61, -16, 4, -73, -62, -20, 25, -2, 25, -41, -37, 29, -22, 40, 0, -60, 29, -39, -36, -44, -63, 1, -1, 13, -61, -66, 7, -53, 23, -22, -58, -2, -23, -59, -39, -71, 22, -43, 26, -46, -59, -32, -68, 0, -31, -64, 9, 24, 21, 26, 1, -5, -45, -17, -47, -24, -51, -19, -4, 24, -38, 35, -25, -9, -1, -41, -34, 46, 19, -12, 41, 7, -8, -16, 18, -22, 2, -47, -3, -48, -34, 38, -22, -16, 66, 3, -31, 67, 20, -44, -21, -9, -53, 2, 13, -25, -39, -31, -9, -42, -52, 14, -6, -22, 13, -34, 31, -41, -5, -75, -7, 5, -23, -12, 26, -81, -33, 9, -17, 12, -36, -71, -49, 26, -14, 20, -58, -24, 22, -44, -69, 50, 20, -29, -72, -52, -35, -49, -12, -67, -65, -51, 5, -30, -4, -5, -48, 12, -10, -86, -31, 3, 16, -59, -43, -42, -39, -56, -43, 13, 26, -46, -28, -16, -19, -8, 30, 26, 25, -38, -48, -3, 8, -52, -46, 0, 15, -26, -58, 29, -13, 35, -38, 7, 51, 25, 18, -34, 36, -48, -3, -22, 22, 38, 16, 16, -30, 30, 
  -59, 49, 20, 21, 1, 46, 49, 22, 38, 73, -9, 53, 34, 51, 33, 0, 18, 18, 80, -13, 29, -32, 29, 10, 26, 30, 6, 73, 13, 14, 35, 73, 26, 34, 18, -38, -47, -10, -11, -42, -52, -55, 18, 20, 26, -11, 29, -31, -20, -19, -53, -24, -27, -39, -35, -75, -54, 24, 32, -46, -3, 22, -37, -41, -43, -27, 1, -63, 1, 22, 67, -79, 47, 16, 76, 82, -21, -32, 5, 51, 16, -41, -5, 2, 49, -2, -31, -66, 12, -49, -11, -6, 22, -27, -11, 6, -31, -40, 10, -54, 4, 15, -34, -19, -59, 17, 21, -71, -27, -22, -26, -57, 50, 1, -27, 59, 28, 22, -39, -47, 10, -49, -17, -38, 26, -22, 1, 6, -48, 44, -29, -39, 16, -16, 39, 46, -42, -20, 44, 113, -96, 30, 20, 40, 57, 64, 64, 62, 21, 24, -2, 17, 23, 13, -8, 82, 52, 60, -12, -28, -54, -37, 60, -14, -28, -1, -29, 12, -36, -19, -2, -41, -2, -41, -20, 24, -2, -37, -48, -31, -32, 32, 3, 18, 8, 60, 1, 11, 55, 73, 44, 20, 35, 45, -23, 8, -41, -42, -45, 41, 33, -36, -46, -7, -42, 24, 26, 
  -18, -10, -27, -39, 18, -60, 2, 5, 22, -44, -72, -12, -49, 16, -49, 18, -33, 4, 24, 26, 95, -60, 28, -23, -11, -4, 80, 61, 9, 9, 15, 48, 24, -33, -6, -16, -42, 5, 32, -39, 20, 29, -48, -9, 22, -10, -23, -32, 18, -15, 25, -15, -14, -10, 21, -51, 9, -4, 1, -21, 54, -19, -16, 17, -26, 33, 2, -32, -35, -57, 16, -53, 3, 37, 2, -42, -60, 15, -31, -50, 29, -33, 14, -9, 22, 0, 8, 5, -29, 14, -20, 56, 37, -2, 67, 69, 36, 38, 40, 40, -37, -39, -22, -23, 18, -16, 58, 36, 9, -19, -19, 25, -5, -36, -24, -35, 39, 62, -4, 22, -31, 41, 57, -47, 54, 32, 19, 33, -37, 1, 28, -25, 8, 26, 21, 32, -17, 41, 40, 21, 17, 41, 36, 61, -29, 3, -57, -29, -30, 25, 24, -22, -14, -1, 27, 73, 39, -9, 76, -31, 17, 46, 29, 61, 15, -21, -6, 4, -11, -10, -32, -8, 14, -41, -6, 23, 34, -10, -15, -29, 51, -22, 15, 57, -12, 35, 48, 16, 54, -10, 25, 40, -2, 67, 13, -21, 38, -31, -21, 20, 70, 10, 24, 4, -19, -11, 37, 
  -121, -21, 22, 66, 19, 9, -18, 50, 36, -61, 37, 43, 47, 33, 44, -21, -58, -22, 64, 56, 21, 66, 9, 24, 47, 63, 7, 77, 89, 76, 13, 24, 47, -13, 42, 14, 49, -48, 23, 40, -43, 44, 20, 42, 44, -57, -2, -38, 30, 21, -56, -9, -12, -73, 2, -52, -59, -77, -40, -34, 30, 5, 28, 53, -53, -50, 26, -67, -63, -89, 26, -26, 6, -19, 14, 46, 25, 92, 63, 79, 45, 59, 44, 2, 18, -32, 56, 25, 64, 36, 79, 71, 24, 73, 86, 48, 10, 8, 68, 26, -3, 14, 62, -12, -40, -13, 15, -11, 7, -21, -47, -13, -41, 38, 5, 26, -67, -27, 22, -32, -86, 3, -24, 0, -68, -37, -29, -58, -5, -5, -53, -50, -39, 10, -46, -62, -53, -17, -12, -40, 103, 55, 14, -55, 0, 23, -27, -75, -45, -50, -8, -42, 17, 12, -31, 22, 22, 54, 6, -31, 24, 32, 45, 45, -17, 12, -10, -33, 1, -26, -65, -36, 10, -42, 20, 23, 9, 34, 37, -47, -16, 29, 52, 17, -16, -46, -10, 26, 10, -35, -11, -32, -8, -29, -6, 40, -5, -59, -48, -26, -27, -20, -49, -20, 23, -2, 4, 
  18, -19, 17, -30, -38, -64, 31, -15, -28, 24, -28, -3, -47, -34, -41, 14, 32, 36, -13, -20, -15, 51, -9, -16, -21, -5, 36, 24, -56, -60, 12, -46, 43, -39, -15, -31, -16, -57, 7, 30, 8, 15, -47, -24, 24, -39, 37, 26, -14, 39, 22, 35, -40, -18, -13, 57, 30, 45, 43, 26, -53, -45, 44, 46, 5, 25, -17, 53, -47, -24, -53, 25, 42, 23, 2, 17, -9, -8, -18, -14, 44, -49, 26, -36, 20, -24, 27, -19, 50, -1, -3, 22, 33, 53, 23, 10, 15, -5, -36, -33, -7, -34, 27, -10, 58, -21, -44, -5, -33, 25, -22, 8, -30, 3, 25, -7, -22, -38, -30, -3, 50, -11, -28, -2, -46, 12, 56, -34, -23, 28, -11, -2, 32, -5, -1, -10, 34, 29, -81, -9, 38, 2, 22, -35, 6, -66, 28, 1, -63, -63, -9, 8, -26, -40, 21, 44, 35, -37, 37, -43, -12, 24, -57, -15, -59, -44, -4, -31, 39, -21, -20, -54, -38, 20, 21, 5, -21, 28, -16, 10, -32, -7, 20, 4, 2, -52, -36, -47, 33, -38, 39, -24, 13, -32, -21, 36, 3, -26, -4, -25, -37, 64, -3, -49, -44, -55, -8, 
  -17, 40, 10, -3, -19, -42, 6, 55, -20, 13, -49, -19, -52, 26, 10, 0, -48, 16, -16, 5, -41, -44, -4, -26, 40, -13, 16, -7, -25, 54, -10, -5, 42, -32, 13, -50, 37, -31, 23, 48, 38, 21, -37, -14, 10, -52, -39, -35, -1, 35, 48, -7, 19, -21, 25, 33, 19, -6, 31, 5, 15, -51, 36, -41, -14, 0, -19, 44, 48, 23, 49, -24, 36, -41, -53, -34, -6, -7, 35, 1, -41, 20, -26, 43, -4, -41, 16, -3, 54, -9, 6, 4, -33, 42, 3, -4, -6, 18, 0, 33, -8, 16, 44, -30, 13, 10, 53, -35, 19, 30, -6, -4, 17, 32, 39, 11, 27, -41, 15, -32, -53, 31, -41, 9, 3, 51, -8, -20, -25, -48, 5, 19, -33, -18, 11, 48, 25, -41, 41, 51, 29, -2, 1, -30, 8, -30, 47, 49, 46, -25, 41, 14, 18, -49, 38, -4, -16, 42, -21, -3, 31, -53, 28, -43, 36, -52, 52, -29, 30, 5, -2, 45, -45, 1, -45, 14, -42, -15, 53, 26, 45, 18, -53, -41, -9, -31, 1, -28, 52, -47, -29, 53, 26, 5, 12, -36, 48, -3, 39, 3, -6, 19, 38, 35, -48, -41, -42, 
  2, -65, 11, 2, -9, -65, -21, 58, -2, 8, 4, 3, 15, 28, 50, -7, 3, 0, 77, 60, -3, 58, 20, 65, 7, 30, 88, -28, 65, 13, 38, -55, 14, 6, -31, 44, -52, 21, -28, 57, 3, 25, 17, 2, -34, -63, 48, -43, -3, -13, -54, 41, -42, 23, 16, -11, -13, 35, 17, -42, -55, -5, 23, -24, 22, 16, -41, 18, -50, -58, 3, 60, 10, 40, -4, 45, 66, 82, 60, 8, 63, 56, 13, 41, -11, 11, 85, 62, 4, 34, 15, 85, 38, 112, 25, 6, 12, -11, -28, 23, -15, -1, 33, 1, 57, -13, 3, -18, -27, -21, -3, 21, 13, -51, 16, -35, 3, -50, -63, -39, -57, -20, -69, -16, -44, -66, -31, 6, -38, -66, 0, -52, -19, -5, 15, 6, -63, -2, 19, -18, 59, 49, -20, -96, -63, 14, 36, -71, 19, 8, -31, 35, -27, 27, -10, -61, 15, -15, 46, -10, 97, 34, -15, -25, 39, -22, -19, 34, 27, 4, -62, 37, 52, 71, 23, -39, -40, -8, 31, -8, 33, -34, 55, -13, -46, -60, 21, -64, -53, -65, 23, -32, 25, -20, -48, -27, 42, 26, -26, -7, -40, -32, -30, -30, 2, 33, 47, 
  70, -24, -16, 35, 43, 38, 34, 36, -7, 65, 3, 62, -16, 33, -37, -40, -1, -27, -56, 44, 19, -53, -50, -26, -17, 31, -46, -12, -79, -31, -9, 48, 11, -51, -21, -51, -3, 18, 33, -14, -5, 13, 49, 58, 25, 9, 15, -39, -28, 32, -21, -5, -6, 23, -8, -22, -33, 53, 49, -33, -24, -8, 43, -44, 40, 17, 17, -8, -6, 87, -40, -3, -21, 21, 10, 5, -31, 21, -41, 21, 42, -61, 34, -9, -4, -60, -19, -9, 11, -58, -56, -85, -44, -80, -79, -78, -53, -68, -23, 19, -37, 12, -20, -63, -6, -19, -34, -53, 49, -5, -34, -39, 24, 19, 38, -18, 48, 0, -17, 32, -1, 32, 5, -39, 29, 40, -26, -34, -3, -1, 44, -8, -3, 23, -25, 47, -6, 1, 5, 38, -36, 25, 35, 60, 25, 26, 4, -9, 53, 13, 19, -25, 8, 37, 18, 2, -34, -8, -36, -35, -42, -62, -1, -29, -27, -31, -69, 7, -56, -13, 24, -27, -37, -9, -55, 15, -38, -71, -43, -24, -16, 34, -32, -31, -45, -5, 12, 29, 38, -13, -65, -32, 23, 34, -32, 10, 28, 32, -35, 7, -38, -15, -37, -5, -28, 33, -23, 
  36, 50, 31, -12, -49, 36, -4, -30, -2, -6, 6, 35, 34, -18, 11, -21, 24, -23, 55, 13, 51, 38, 50, 24, 35, 37, 41, -3, 47, -45, 32, -49, -6, 1, -42, -13, -45, 47, -34, 7, -25, -26, -47, -19, -46, 18, -17, -5, -26, 18, -48, -51, 56, -32, 30, 28, 9, 27, -4, -18, 36, -11, 47, -20, 5, -49, 48, 41, 35, -18, -25, -19, 7, -45, -15, -46, -37, -22, -28, 48, -25, -29, -40, -23, 47, 13, 0, 21, 33, 31, 2, -47, -46, -10, 43, -2, 51, 15, 25, -28, -36, -31, -23, 26, 8, 41, -12, 8, 16, -3, -22, 38, 11, 26, 44, 52, 20, -32, 47, -12, 39, 45, 4, -14, 30, -48, 12, 55, -46, 43, -47, 44, -52, -13, -36, 1, -37, 50, 18, 44, 42, -5, 35, -27, -41, 10, 25, -35, -46, -29, 50, 32, -27, -34, -24, 34, -50, -48, 32, -7, 34, 8, 11, -40, -12, -48, -44, 18, 14, 14, 48, -4, 10, 44, 48, -21, 44, -14, -52, 22, -45, -17, -37, -16, 2, 25, -38, -19, -46, 31, 29, 26, 3, 32, -41, 26, -5, -20, -47, 45, 40, 20, -15, -13, 18, -13, 9, 
  -58, 26, -48, -11, -37, 35, -47, 1, -27, -52, -44, -35, -51, -11, -32, 45, -3, 34, 41, -32, -8, 37, 13, 53, 57, 40, 6, 19, 2, 28, -20, -12, -35, 2, 42, 21, 41, 45, -4, 12, 16, 26, -25, 18, -19, -50, 39, 27, 50, -38, 32, 55, -48, -46, -28, 14, 35, 10, -45, 21, -44, -25, -33, 46, 5, -8, -46, -11, -32, 9, -31, 35, 39, -7, -7, -39, 50, -14, -52, 39, 29, 54, -43, -28, -36, 44, -34, -26, 28, 12, 45, 23, -13, -4, 9, 52, 1, -47, -38, -21, 37, -38, -43, -16, 11, 1, -50, -20, 26, 24, 30, -25, -19, -20, 50, 40, 47, 34, 40, 31, 47, -48, -22, 51, -25, 29, 43, -13, -22, 26, -20, -27, -15, -11, -41, 29, 52, 4, 4, -44, 42, -46, 12, 2, 10, 23, 53, -1, -49, -1, -49, -45, -23, -37, 50, -42, -40, 31, -42, -6, -8, -49, 28, 27, 7, -49, -16, -22, 2, -28, 15, 43, 40, -13, -45, -28, 9, -34, 44, -5, -49, 4, 34, 45, 30, -32, 58, 44, -6, 4, 10, -23, -18, 56, 14, -40, -17, -12, -46, -3, 33, 20, -30, -9, 27, 38, 44, 
  55, 14, 24, -52, -42, -20, 33, 10, -2, 19, -40, 18, 16, -41, 27, -30, 0, 1, 20, 13, -45, 26, -49, 43, 46, -9, -25, -16, 39, 38, -51, -42, -42, -11, 55, 49, -14, -41, -41, 16, 22, -6, 4, -16, -17, 39, 5, -50, 33, 22, -16, -33, -9, -2, 40, 49, -34, -22, 13, -8, 15, 19, 36, 37, 15, -51, -47, 25, 26, 17, 44, 10, -13, -24, 0, 49, 16, -33, 26, 55, -22, -36, 17, -35, -22, 37, -18, 15, -20, -27, 0, 51, 26, -27, -7, 4, -29, 20, -47, 27, 46, 34, 26, 23, 27, -24, 2, -48, 42, 5, -12, 3, 19, 27, -51, 8, -15, 47, -19, -30, -26, -44, -32, -40, 46, 26, -38, 13, 26, -48, 36, -22, -40, -50, 17, 17, -6, -48, 50, 30, -20, -41, -26, 15, -9, -51, -5, -19, 23, -21, -1, 30, 27, 47, -29, -29, -22, 7, -8, 2, 45, -46, 42, 19, -4, 6, 14, -32, -2, 6, 36, -19, -26, -48, 41, 46, 19, 3, 19, 51, 16, -47, 23, -43, -9, 34, -45, 29, 53, 5, -37, -52, 37, -53, 3, 22, -12, -28, -51, -9, 16, 42, 21, -22, -14, 31, 15, 
  -7, 18, 48, -16, -41, -48, 54, -21, 40, -13, 46, 50, 34, 49, -20, 25, -22, -19, 49, 1, -12, -12, 52, 2, 17, 21, 34, 26, 55, 21, -5, -11, 2, -22, 14, -12, -38, 14, 14, 29, 24, 39, 47, -8, -28, -17, 12, 25, -47, -5, -40, 36, 16, 18, 49, 31, 27, -10, 6, -43, 41, 29, -2, -15, 38, 32, 35, -13, -11, -12, -42, 2, -30, -33, 43, 15, 24, 43, 24, 9, 24, 49, -45, -29, -51, -48, -35, 25, -7, 35, 27, -43, -53, -41, 10, 16, 24, 36, -9, -15, -7, -4, 41, 38, 33, 21, 5, 53, 0, -46, -11, 11, 22, 17, -49, -35, -50, 4, 34, 19, 54, 48, 4, -11, -4, -14, -29, -41, 54, 40, -33, 32, 22, -11, -47, 11, -40, 41, -26, 31, -4, 7, -8, 23, 35, -49, 1, -22, -37, -27, 38, -31, -6, 4, -8, 19, 27, 54, -4, -12, 49, -15, 4, 28, -47, 24, -22, -33, 35, 10, 19, 4, 45, -24, 46, 1, 50, 54, -11, 45, -19, 47, 25, 38, -37, 18, 1, 20, 48, 38, -46, -16, -6, -53, -21, 43, 32, 34, -50, -27, -10, -43, 48, -36, -40, 25, -33, 
  -53, -87, 30, -5, 38, -67, -49, -61, -47, 13, -21, -54, 17, 24, -8, 36, 4, -11, 65, -4, 50, 56, -6, 58, 39, 4, 31, -6, 67, 0, -10, 17, -45, 57, 41, 40, 44, -33, -36, -31, -3, 18, -32, -26, -55, -29, 51, 28, -6, 55, 27, -49, -51, 3, -37, -56, -44, 9, -17, 11, -26, -44, -50, 45, 5, 17, 39, 12, -6, 3, 3, -16, 35, 35, 2, -46, -3, 60, -26, -33, 26, 37, 50, 49, 69, 55, -11, 0, 24, 71, 2, 87, 56, 54, -8, -3, 46, 23, 54, 12, -21, 50, 43, 32, 3, -42, 7, 54, 32, 0, 3, -18, -7, -20, -28, 5, -32, -25, 46, 21, 19, -18, 12, -31, 12, 9, -62, 23, -35, 41, -12, 34, 40, -14, 9, 38, 26, -12, 35, 5, 61, 17, 38, -34, -27, -4, -53, 14, -29, -56, 24, -36, -5, 14, 9, 60, -28, 42, -1, -10, 70, -1, -44, -5, -26, -42, 11, 65, -20, -28, 52, -27, -35, 31, 30, 43, -13, 26, -12, -41, -33, -7, -6, -7, 43, -30, -25, -41, -20, -33, 4, 65, 14, 43, -20, 56, 0, 16, -28, -18, 17, 35, -33, 56, 19, -41, 20, 
  72, -90, -28, 12, 64, 79, -16, 101, 29, 50, 39, 31, 58, 15, 14, -28, 1, 26, -59, -21, -72, -9, 22, -27, 0, -50, -50, 16, -41, -50, -27, -71, -30, -52, -7, 17, 19, -12, 50, -16, 62, 32, 52, -37, 39, -34, -7, 14, 58, 35, 12, 28, -32, -21, 57, -16, 0, 45, 28, -13, -15, -21, -6, -41, 47, 44, 59, 38, 26, 81, -70, 7, 46, 3, 0, -38, 9, 10, 47, -3, -20, 35, -11, -4, 19, 23, 44, 62, -6, -38, 15, 26, -29, 47, -48, -41, -31, 44, -15, -41, 0, 52, 19, -49, -26, 16, -5, 5, -17, 25, 28, -50, -33, 10, -44, 10, 6, -50, 17, -53, -9, -30, -37, -27, 33, 15, -58, 39, 4, 35, -50, -48, 13, -13, -48, -71, 9, -31, -46, -21, 59, 2, 39, -88, -44, 35, 31, -13, 21, 13, -23, -58, -65, -48, -13, 11, -43, -17, -3, -24, -1, 31, 0, -1, -18, -12, 13, -61, -56, -19, 31, -31, 12, 7, -29, -58, 15, 27, -21, -23, 5, -73, -45, -6, -17, -21, -76, -35, 10, -5, -39, -84, -2, 0, -30, -15, -73, -36, 3, -81, -56, -12, -11, 5, 16, -27, -10, 
  127, -74, -24, 8, 4, -14, -2, 62, 55, 51, 77, -46, -47, 44, -33, -11, 33, 51, -7, -55, -15, 81, -6, 12, -23, -36, -47, -100, -18, -107, -30, -58, -7, 36, -5, -26, -46, 2, 50, -46, -29, 53, -40, 46, -11, 32, -21, -55, -39, -10, -3, 36, 38, 14, -16, -15, 45, 11, 56, -22, -11, 27, -15, 55, 37, 58, 79, 38, 30, 57, -23, -19, 49, -12, 14, 14, -1, 34, 6, 25, 19, 9, -34, -13, -15, -23, 26, 15, -54, 16, -34, 19, -21, 36, -51, -26, 16, 23, 6, 15, -74, 64, -21, 18, -18, -22, 27, -13, -16, -7, -26, 14, 76, 29, -61, 3, 24, -63, 28, 55, -15, -1, -7, -31, -47, -4, -13, 68, 43, -37, -7, -28, 13, 0, 52, 5, 41, 27, -73, -12, -47, 26, -2, -61, 9, 35, 31, -2, 36, 4, -15, -51, 23, 44, 28, -81, -24, 34, -68, -28, 46, 41, -26, -11, -63, -40, 2, 4, 30, -10, 17, 23, -24, -33, -56, 13, 62, 20, 10, 0, -83, -76, -55, -8, -22, -38, -26, -32, -14, -34, -78, -38, -44, 10, -28, -38, -86, -13, 7, 7, 20, -67, 20, -50, -87, -28, -82, 
  -11, 44, -36, -58, -57, 6, -17, -2, 8, 5, -17, 11, -37, 22, 14, 35, -6, 8, 12, 26, -55, 37, -54, 22, 3, -1, -24, -13, -2, -23, 26, -12, -11, 37, -3, 17, 7, -44, 14, 48, 29, -26, 15, -31, 45, -30, -42, -2, -34, 43, 28, 3, 41, 50, 26, -27, 53, 30, -32, 52, 7, -28, 16, -16, 16, 30, 16, -25, 8, 20, -36, 51, 34, 37, 12, 29, -36, -2, 32, 3, -52, -47, -7, 37, 40, 25, -12, 11, 13, 40, -18, 40, -4, 18, 40, 25, -56, 15, 15, 17, 40, 37, 44, -30, 29, -41, 1, 14, 49, -39, 10, -57, -58, 6, 30, -33, -19, -46, -2, -4, -29, 12, -9, -19, 21, -16, -34, -27, -13, -43, -9, -18, 13, 47, -36, -19, -27, -12, 7, 19, -37, 8, -29, 3, 44, 0, 41, -5, -10, -39, 26, -13, -25, 46, 35, 29, -22, 42, -21, -41, -25, 55, -39, 38, 16, -5, -36, 46, 43, 15, 0, -16, -21, -26, 40, 63, -2, -45, -38, -4, 63, -15, -26, -19, -5, 22, 2, -9, 14, -43, -35, 44, 26, -35, 36, -34, -35, -35, 25, 29, 49, 54, 1, -6, 53, 8, 32, 
  -50, -54, 0, 9, 50, -37, -39, -61, 11, -67, -57, -16, 24, 31, -12, 19, -63, -29, 55, -1, 0, -16, 39, 6, 28, 5, 21, 75, -4, 77, 52, 11, 44, -25, -10, -24, 19, -40, -19, 4, -3, -5, 15, 39, -5, -46, 44, -45, -4, -23, -1, -10, -12, -49, -13, -57, -11, -22, 28, -48, -36, 43, -42, 9, -48, 24, -6, -26, -19, 12, -33, -18, -13, 50, 59, 50, -9, 31, -10, 21, 35, 63, -47, -7, 19, 44, 33, -12, 71, 15, 38, 78, 86, 40, 32, 13, 30, -1, 68, -2, 7, 3, 0, 6, 46, 42, 34, 52, -7, -43, 34, 10, 27, -45, -42, 21, -12, 47, -29, -52, 16, -17, -36, -7, 49, -5, -8, -56, 47, 45, -18, 47, -14, 4, -46, -4, 37, -45, 57, -86, 58, -5, 28, -16, -13, 35, 53, 9, -7, 25, -19, 0, 43, 20, 9, -3, 38, 57, -5, -1, -24, 32, 6, 59, 59, -19, 62, -37, -8, 6, 31, -6, 35, 49, 28, -3, 27, 53, -42, 65, 53, -10, -35, 25, 59, -6, -21, 48, -30, 43, 66, -29, -29, 67, 60, 43, 36, -24, -8, 29, -18, 39, -32, -7, 68, 44, -33, 
  33, 64, 22, 33, 41, 27, 17, 72, 42, 32, 16, 83, -3, 69, -32, 12, -16, 27, 44, -21, 19, -39, -56, 45, -22, -49, -42, 9, -18, -37, -13, -29, 1, 5, -2, 45, 57, -27, 28, -51, -57, -27, 37, -16, 23, -20, 4, 58, -46, 26, -9, -28, 45, 37, 15, -36, 50, -35, -3, -8, 31, -37, 38, 31, -9, 19, -16, 11, 27, 36, 45, -48, 30, 57, 68, 26, -51, -45, 36, -36, -41, -45, -27, 15, 25, 50, -63, -20, -2, -17, -41, 18, -100, -79, 12, -25, -4, -29, 29, -80, 30, -12, -28, -55, -31, -57, -64, 29, 5, -38, -57, -16, 68, -7, -49, 29, 49, 69, -23, 2, -14, 72, 26, 47, 9, 40, 36, 52, 55, 52, 38, 5, -31, 61, 16, 9, 49, 43, 58, 44, -95, -38, -24, 97, 71, 21, 45, 72, 92, 34, 43, 72, -13, -1, 24, 1, -3, 25, 7, -34, -72, -50, -42, -5, 44, 44, -50, -30, 53, 22, -48, -20, 15, 18, 32, 29, 0, -16, -34, 27, 47, 45, 28, -17, -41, 15, 39, -18, -3, -47, 24, 20, -10, 34, 33, -50, -12, 46, 19, -42, -14, -41, 3, -57, -17, -36, 4, 
  -87, 41, 12, -58, 21, 18, -30, -26, -12, -25, -47, -11, -42, -18, -54, -16, -31, -50, -14, 28, 3, 16, -51, 50, -35, -51, 5, 7, -28, 7, 62, 0, -48, -60, 45, 29, 16, -34, -57, -25, -59, -4, -53, 21, 5, 0, 52, 26, -58, -61, 6, -57, 5, -43, 15, -50, -29, -45, -19, 44, -3, -33, -41, 20, 7, -44, 16, -45, -19, 55, 58, 9, 47, -12, -4, 32, 23, -12, -26, 4, 20, 21, 53, -9, 36, -1, 25, -20, -4, -71, -72, 22, 13, -50, -50, -59, 27, 15, 56, -35, -53, 33, -10, -1, -42, 0, -39, -70, -8, 25, -41, 4, -51, -36, -35, -22, 44, 41, -40, -50, 50, -22, -8, 8, 24, 40, 0, -28, 9, 7, -50, -39, -9, 6, -9, -7, 17, 55, 31, 106, 8, -1, 14, 38, 96, 61, 31, 38, 24, 32, 8, 46, 79, 48, 7, 8, 39, -14, 75, -13, -9, -19, 47, -32, 1, -31, -7, 61, 10, 33, 59, -38, 41, 30, -3, 31, -47, -30, 38, 49, 44, 11, -49, 57, 72, -10, -32, 3, 29, 42, 16, 21, -5, -5, 12, -6, -13, -2, 50, -26, 50, -38, -3, 25, -4, 11, -20, 
  -42, 55, 5, -7, 7, -17, 15, -23, 28, 28, -47, 42, 32, 0, -13, -25, -21, -56, -27, 13, -10, -65, 29, -42, -13, -5, -37, -20, 21, 53, -33, 7, 31, -48, -9, 3, -61, 2, -12, -22, -55, -55, -4, 15, -12, -55, -66, 5, -24, -17, 0, 7, -67, -1, 3, -47, 15, -63, -53, 31, -50, 20, -57, -3, -63, -26, -36, -51, -63, -22, -28, 34, 12, 21, 19, 36, -52, -62, -51, -29, 47, -3, 1, -49, -7, 14, 42, -14, 18, -6, -52, 3, -40, -22, 13, -50, -35, -40, 53, -34, -20, 30, 23, -51, -23, 24, -64, -57, -16, 19, 44, 31, -54, -45, 14, 3, -10, -36, -34, -17, 41, -3, 12, -42, 5, 17, -57, -15, -40, -12, -52, -17, 25, 19, -8, 46, 12, 28, 20, 2, 36, -8, 43, 50, 33, 55, -34, 46, -1, 37, -55, 33, -2, -17, 1, -43, -43, -13, 1, 20, -57, -57, 47, -18, 16, -45, 33, 28, 42, -43, -23, 25, 7, -24, 2, 25, -55, -6, -41, -19, 11, -32, -26, -12, -18, 23, -40, -9, -12, 51, -20, -14, 49, 26, -3, 31, -44, -39, 48, -45, 19, -61, 4, 24, 21, -2, -35, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,207 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0029804019723087549, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.19328504800796509, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.14388969540596008, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.24340125918388367, } };
const TfArray<1, int> quant9_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 207, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4140, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_34_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_34_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_34_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_34_3_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_34_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
